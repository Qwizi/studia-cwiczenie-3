[tool.poetry]
name = "task3-dsw"
version = "0.0.1"
description = ""
authors = ["Adrian Ciolek <ciolek.adrian@protonmail.com>"]
readme = "README.md"
packages = [{ include = "task3_dsw/" }]

[tool.poetry.dependencies]
python = "^3.11"
httpx = "^0.26.0"
pydantic = "^2.5.3"
pydantic-settings = "^2.1.0"


[tool.poetry.group.dev.dependencies]
ruff = "^0.1.14"
pre-commit = "^3.6.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
exclude = ["tests/"]
select = ["ALL"]
ignore = [
    # Description: Missing type annotation for self in method
    # Rationale: It is mostly redundant, as is for ANN102.
    "ANN101",

    # Description: Missing type annotation for cls in method
    # Rationale: It is mostly redundant, as is for ANN101.
    "ANN102",

    # Description: Dynamically typed expressions (typing.Any) are disallowed
    # Rationale:
    #  We use Any to allow user to constrain return types of our functions on their own.
    #  For example, having a function `def foo() -> Any: ...` allows user to write
    #  `my_foo: int = foo()` and have it passed type checking, since `Any` disables
    #  type checking completely.
    "ANN401",

    # Description: 1 blank line required before class docstring
    # Rationale: Remove the warning -- D211 (no-blank-line-before-class) preferred.
    "D203",

    # Description: Multi-line docstring summary should start at the second line
    # Rationale: Remove the warning -- D213 (multi-line-summary-second-line) preferred.
    "D212",

    # Description: Line contains TODO, consider resolving the issue
    # Rationale: Not appropriate for the project.
    "FIX002",

    "D401",
    "ISC001",
    "COM812",
]